{
  "api/Catalyst.Collections.StaticArrayPool-1.html": {
    "href": "api/Catalyst.Collections.StaticArrayPool-1.html",
    "title": "Class StaticArrayPool<T> | CatalystUI",
    "summary": "Class StaticArrayPool<T> Namespace Catalyst.Collections Assembly CatalystUI.Collections.dll A fixed-size pool implementation with zero memory allocations after initialization. public sealed class StaticArrayPool<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : struct Type Parameters T The type of elements stored in the pool. Inheritance object StaticArrayPool<T> Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Allocations should be made using the PeekNext() method, which returns a reference to the next available slot in the pool. Once updated, the Allocate() method should be fired, which returns the index of the newly allocated element and increments the count by one. To release an allocated element, the Release(int) method should be called with the index of the element to release. Constructors StaticArrayPool(int) Constructs a new StaticArrayPool<T>. public StaticArrayPool(int capacity) Parameters capacity int The allocated capacity of the pool. Properties Capacity Gets the total allocated capacity of the pool. public int Capacity { get; } Property Value int The pool's total allocated capacity. Count Gets the current number of elements in the pool. public int Count { get; } Property Value int The pool's current element count. IsEmpty Gets a flag indicating if the pool is empty. public bool IsEmpty { get; } Property Value bool true if the pool is empty; otherwise, false. IsFull Gets a flag indicating if the pool is full. public bool IsFull { get; } Property Value bool true if the pool is full; otherwise, false. this[int] Gets a reference to the element at the specified index. public ref T this[int index] { get; } Parameters index int The index of the element to access. Property Value T Exceptions IndexOutOfRangeException Thrown if the pool is empty, the index is out of range, or the index is out of bounds. Items Gets the underlying array of the pool. public T[] Items { get; } Property Value T[] Remarks INTERNAL USE ONLY. Version consistency is not guaranteed, and the property may be changed without notice. Warning: Fetching the underlying array provides access to the raw data of the pool, meaning the return value will provide both valid and invalid instances of the underlying struct type. Prefer enumeration via GetEnumerator() whenever possible. This property is provided for advanced use cases and/or disposal of the underlying structures, and should be used with special care, attention, and caution. Methods Allocate() Increments the count of allocated elements and returns the index of the newly allocated element. public int Allocate() Returns int The index of the newly allocated element. Clear() Clears the queue by resetting all elements to their defaults. public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. PeekNext() Peeks at the next available slot in the pool. public ref T PeekNext() Returns T A reference to the next available slot in the pool. Release(int) Releases an allocated element in the pool by its index. public void Release(int index) Parameters index int The index of the element to release."
  },
  "api/Catalyst.Collections.StaticArrayQueue-1.html": {
    "href": "api/Catalyst.Collections.StaticArrayQueue-1.html",
    "title": "Class StaticArrayQueue<T> | CatalystUI",
    "summary": "Class StaticArrayQueue<T> Namespace Catalyst.Collections Assembly CatalystUI.Collections.dll A fixed-size queue implementation with zero memory allocations after initialization. public sealed class StaticArrayQueue<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : struct Type Parameters T The type of elements stored in the queue. Inheritance object StaticArrayQueue<T> Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Allocations should be made using the PeekEnqueue() method, which returns a reference to the next available slot in the queue. Once updated, the Enqueue() method should be fired to increment the write counter by one. Similarly, the PeekDequeue() method returns a reference to the front-most enqueued slot in the queue. Once read, the Dequeue() method should be called to increment the read counter by one. Constructors StaticArrayQueue(int) Constructs a new StaticArrayQueue<T>. public StaticArrayQueue(int capacity) Parameters capacity int The allocated capacity of the queue. Properties Capacity Gets the total allocated capacity of the queue. public int Capacity { get; } Property Value int The queue's total allocated capacity. Count Gets the current number of elements in the queue. public int Count { get; } Property Value int The queue's current element count. IsEmpty Gets a flag indicating if the queue is empty. public bool IsEmpty { get; } Property Value bool true if the queue is empty; otherwise, false. IsFull Gets a flag indicating if the queue is full. public bool IsFull { get; } Property Value bool true if the queue is full; otherwise, false. this[int] Gets a reference to the element at the specified index. public ref T this[int index] { get; } Parameters index int The index of the element to access. Property Value T Exceptions IndexOutOfRangeException Thrown if the queue is empty, the index is out of range, or the index is out of bounds. Items Gets the underlying array of the queue. public T[] Items { get; } Property Value T[] Remarks INTERNAL USE ONLY. Version consistency is not guaranteed, and the property may be changed without notice. Warning: Fetching the underlying array provides access to the raw data of the queue, meaning the return value will provide both valid and invalid instances of the underlying struct type. Prefer index-based access via the this[int] indexer or enumeration via GetEnumerator() whenever possible. This property is provided for advanced use cases and/or disposal of the underlying structures, and should be used with special care, attention, and caution. Methods Clear() Clears the queue by resetting all values to their defaults. public void Clear() Dequeue() Increments the read counter by one. public void Dequeue() Exceptions IndexOutOfRangeException Thrown if the queue is empty. Enqueue() Increments the write counter by one. public void Enqueue() Exceptions IndexOutOfRangeException Thrown if the queue is full. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. PeekDequeue() Peeks at the front-most element in the queue. public ref T PeekDequeue() Returns T A reference to the front-most element in the queue. Exceptions IndexOutOfRangeException Thrown if the queue is empty. PeekEnqueue() Peeks at the next available slot in the queue. public ref T PeekEnqueue() Returns T A reference to the next available slot in the queue. Exceptions IndexOutOfRangeException Thrown if the queue is full."
  },
  "api/Catalyst.Collections.StaticArrayStack-1.html": {
    "href": "api/Catalyst.Collections.StaticArrayStack-1.html",
    "title": "Class StaticArrayStack<T> | CatalystUI",
    "summary": "Class StaticArrayStack<T> Namespace Catalyst.Collections Assembly CatalystUI.Collections.dll A fixed-size stack implementation with zero memory allocations after initialization. public sealed class StaticArrayStack<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : struct Type Parameters T The type of elements stored in the stack. Inheritance object StaticArrayStack<T> Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Allocations should be made using the PeekPush() method, which returns a reference to the next available slot in the stack. Once updated, the Push() method should be fired to increment the count by one. Similarly, the PeekPop() method returns a reference to the top-most element in the stack. Once read, the Pop() method should be called to decrement the count by one. Constructors StaticArrayStack(int) Constructs a new StaticArrayStack<T>. public StaticArrayStack(int capacity) Parameters capacity int The allocated capacity of the stack. Properties Capacity Gets the total allocated capacity of the stack. public int Capacity { get; } Property Value int The stack's total allocated capacity. Count Gets the current number of elements in the stack. public int Count { get; } Property Value int The stack's current element count. IsEmpty Gets a flag indicating whether the stack is empty. public bool IsEmpty { get; } Property Value bool true if the stack is empty; otherwise, false. IsFull Gets a flag indicating whether the stack is full. public bool IsFull { get; } Property Value bool true if the stack is full; otherwise, false. this[int] Gets a reference to the element at the specified index. public ref T this[int index] { get; } Parameters index int The index of the element to access. Property Value T Exceptions IndexOutOfRangeException Thrown if the stack is empty, the index is out of range, or the index is out of bounds. Items Gets the underlying array of the stack. public T[] Items { get; } Property Value T[] Remarks INTERNAL USE ONLY. Version consistency is not guaranteed, and the property may be changed without notice. Warning: Fetching the underlying array provides access to the raw data of the stack, meaning the return value will provide both valid and invalid instances of the underlying struct type. Prefer enumeration via GetEnumerator() whenever possible. This property is provided for advanced use cases and/or disposal of the underlying structures, and should be used with special care, attention, and caution. Methods Clear() Clears the stack by resetting all values to their defaults. public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. PeekPop() Peeks at the top element of the stack. public ref T PeekPop() Returns T A reference to the top element of the stack. Exceptions IndexOutOfRangeException Thrown if the stack is empty. PeekPush() Peeks at the next available slot in the stack. public ref T PeekPush() Returns T A reference to the next available slot in the stack. Exceptions IndexOutOfRangeException Thrown if the stack is full. Pop() Decrements the head counter by one. public void Pop() Exceptions IndexOutOfRangeException Thrown if the stack is empty. Push() Increments the head counter by one. public void Push() Exceptions IndexOutOfRangeException Thrown if the stack is full."
  },
  "api/Catalyst.Collections.html": {
    "href": "api/Catalyst.Collections.html",
    "title": "Namespace Catalyst.Collections | CatalystUI",
    "summary": "Namespace Catalyst.Collections Classes StaticArrayPool<T> A fixed-size pool implementation with zero memory allocations after initialization. StaticArrayQueue<T> A fixed-size queue implementation with zero memory allocations after initialization. StaticArrayStack<T> A fixed-size stack implementation with zero memory allocations after initialization."
  },
  "api/Catalyst.Threading.DelegateQueue.EnqueuedDelegate.html": {
    "href": "api/Catalyst.Threading.DelegateQueue.EnqueuedDelegate.html",
    "title": "Struct DelegateQueue.EnqueuedDelegate | CatalystUI",
    "summary": "Struct DelegateQueue.EnqueuedDelegate Namespace Catalyst.Threading Assembly CatalystUI.Threading.dll Represents a delegate which has been enqueued for execution. public record struct DelegateQueue.EnqueuedDelegate : IEquatable<DelegateQueue.EnqueuedDelegate> Implements IEquatable<DelegateQueue.EnqueuedDelegate> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Caller Gets or sets a pointer to the caller of the delegate. public required nint Caller { readonly get; set; } Property Value nint The delegate's caller poiner. Delegate Gets or sets the delegate to be executed. public required Delegate Delegate { readonly get; set; } Property Value Delegate The delegate to execute. Exception Gets or sets an exception that occurred during execution of the delegate, if any. public required Exception? Exception { readonly get; set; } Property Value Exception The exception that occurred during execution, or null if no exception occurred. HasAwaiter Gets or sets a flag indicating whether the delegate has an awaiter. public required bool HasAwaiter { readonly get; set; } Property Value bool true if the delegate has an awaiter; otherwise, false. Parameters Gets or sets a pointer to the parameters of the delegate. public required nint Parameters { readonly get; set; } Property Value nint The delegate's parameters pointer. Return Gets or sets a pointer to the return value of the delegate. public required nint Return { readonly get; set; } Property Value nint The delegate's return pointer. WaitHandle Gets or sets a wait handle that can be used to wait for the delegate to complete execution. public required ManualResetEvent? WaitHandle { readonly get; set; } Property Value ManualResetEvent The wait handle for the delegate. Methods Execute() Executes the enqueued delegate. public void Execute()"
  },
  "api/Catalyst.Threading.DelegateQueue.html": {
    "href": "api/Catalyst.Threading.DelegateQueue.html",
    "title": "Class DelegateQueue | CatalystUI",
    "summary": "Class DelegateQueue Namespace Catalyst.Threading Assembly CatalystUI.Threading.dll A thread-safe StaticArrayQueue<T> which enqueues and dequeues delegates for execution. public sealed class DelegateQueue : IDisposable Inheritance object DelegateQueue Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DelegateQueue(int?) Constructs a new DelegateQueue. public DelegateQueue(int? size = null) Parameters size int? The size of the queue, or null to use the default value of ProcessorCount. Properties Queue Gets a read-only collection for the underlying queue of enqueued delegates. public IReadOnlyCollection<DelegateQueue.EnqueuedDelegate> Queue { get; } Property Value IReadOnlyCollection<DelegateQueue.EnqueuedDelegate> The underlying queue of enqueued delegates. Methods Dispose() Disposes of the DelegateQueue. public void Dispose() Enqueue(Delegate, nint, nint, out nint, bool, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Enqueue(Delegate @delegate, nint caller, nint parameters, out nint @return, bool wait = false, int timeout = -1) Parameters delegate Delegate The delegate to enqueue. caller nint A pointer to the caller of the delegate. parameters nint A pointer to the parameters of the delegate. return nint A pointer to the return value of the delegate. wait bool Whether to wait for the delegate to complete execution. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute() Loops through the queue and executes all enqueued delegates. public void Execute() ~DelegateQueue() Disposes of the DelegateQueue. protected ~DelegateQueue()"
  },
  "api/Catalyst.Threading.ThreadDelegateDispatcher.html": {
    "href": "api/Catalyst.Threading.ThreadDelegateDispatcher.html",
    "title": "Class ThreadDelegateDispatcher | CatalystUI",
    "summary": "Class ThreadDelegateDispatcher Namespace Catalyst.Threading Assembly CatalystUI.Threading.dll Provides delegate execution synchronization for a given thread. public sealed class ThreadDelegateDispatcher : IDisposable Inheritance object ThreadDelegateDispatcher Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties MainThreadDispatcher Gets the main thread dispatcher fetched via Capture(out ThreadDelegateDispatcher, Action, int?, bool). public static ThreadDelegateDispatcher? MainThreadDispatcher { get; } Property Value ThreadDelegateDispatcher The main thread dispatcher, or null if it has not been captured. Thread Gets the worker thread of the dispatcher. public Thread? Thread { get; } Property Value Thread The dispatcher's worker thread, or null if it is associated with the main thread. ThreadId Gets the managed thread ID of dispatcher's worker thread. public int ThreadId { get; } Property Value int The dispatcher's worker thread managed thread ID. Methods Capture(Action<ThreadDelegateDispatcher>, int?, bool) Constructs a new ThreadDelegateDispatcher by capturing the current thread and enqueuing the specified callback as the first delegate to be executed. public static void Capture(Action<ThreadDelegateDispatcher> callback, int? queueSize = null, bool isMainThread = false) Parameters callback Action<ThreadDelegateDispatcher> The callback to be executed on the thread. queueSize int? The size of the delegate queue, or null to use the default value of ProcessorCount. isMainThread bool Whether the thread to be captured is the main thread. If true, the dispatcher will be set as the main thread dispatcher. Remarks To end execution of the dispatcher, execute the Dispose() method somewhere within the callback. If the captured thread is not marked as a background thread, such as the main thread, the application will not close until the dispatcher is disposed of. To instead create a new background worker thread, prefer the New(string?, int?) method. Dispose() Disposes of the ThreadDelegateDispatcher. public void Dispose() Execute(in Action, bool, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute(in Action @delegate, bool wait = false, int timeout = -1) Parameters delegate Action The delegate to enqueue. wait bool Whether to wait for the delegate to complete execution. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute(in Action<nint, nint>, nint, nint, bool, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute(in Action<nint, nint> @delegate, nint caller, nint parameters, bool wait = false, int timeout = -1) Parameters delegate Action<nint, nint> The delegate to enqueue. caller nint A pointer to the caller of the delegate. parameters nint A pointer to the parameters of the delegate. wait bool Whether to wait for the delegate to complete execution. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute(in Action<nint>, nint, bool, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute(in Action<nint> @delegate, nint caller, bool wait = false, int timeout = -1) Parameters delegate Action<nint> The delegate to enqueue. caller nint A pointer to the caller of the delegate. wait bool Whether to wait for the delegate to complete execution. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute(in Func<nint, nint, nint>, nint, nint, out nint, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute(in Func<nint, nint, nint> @delegate, nint caller, nint parameters, out nint @return, int timeout = -1) Parameters delegate Func<nint, nint, nint> The delegate to enqueue. caller nint A pointer to the caller of the delegate. parameters nint A pointer to the parameters of the delegate. return nint A pointer to the return value of the delegate. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute(in Func<nint, nint>, nint, out nint, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute(in Func<nint, nint> @delegate, nint caller, out nint @return, int timeout = -1) Parameters delegate Func<nint, nint> The delegate to enqueue. caller nint A pointer to the caller of the delegate. return nint A pointer to the return value of the delegate. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute(in Func<nint>, out nint, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute(in Func<nint> @delegate, out nint @return, int timeout = -1) Parameters delegate Func<nint> The delegate to enqueue. return nint A pointer to the return value of the delegate. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Execute<TCaller>(in Action<TCaller>, TCaller, bool, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute<TCaller>(in Action<TCaller> @delegate, TCaller caller, bool wait = false, int timeout = -1) Parameters delegate Action<TCaller> The delegate to enqueue. caller TCaller A pointer to the caller of the delegate. wait bool Whether to wait for the delegate to complete execution. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Type Parameters TCaller Execute<TCaller, TParameters>(in Action<TCaller, TParameters>, TCaller, TParameters, bool, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute<TCaller, TParameters>(in Action<TCaller, TParameters> @delegate, TCaller caller, TParameters parameters, bool wait = false, int timeout = -1) Parameters delegate Action<TCaller, TParameters> The delegate to enqueue. caller TCaller A pointer to the caller of the delegate. parameters TParameters A pointer to the parameters of the delegate. wait bool Whether to wait for the delegate to complete execution. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Type Parameters TCaller TParameters Execute<TCaller, TReturn>(in Func<TCaller, TReturn>, TCaller, out TReturn, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute<TCaller, TReturn>(in Func<TCaller, TReturn> @delegate, TCaller caller, out TReturn @return, int timeout = -1) Parameters delegate Func<TCaller, TReturn> The delegate to enqueue. caller TCaller A pointer to the caller of the delegate. return TReturn A pointer to the return value of the delegate. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Type Parameters TCaller TReturn Execute<TCaller, TParameters, TReturn>(in Func<TCaller, TParameters, TReturn>, TCaller, TParameters, out TReturn, int) Attempts to enqueue a delegate for execution, and waits for it to complete if specified. public bool Execute<TCaller, TParameters, TReturn>(in Func<TCaller, TParameters, TReturn> @delegate, TCaller caller, TParameters parameters, out TReturn @return, int timeout = -1) Parameters delegate Func<TCaller, TParameters, TReturn> The delegate to enqueue. caller TCaller A pointer to the caller of the delegate. parameters TParameters A pointer to the parameters of the delegate. return TReturn A pointer to the return value of the delegate. timeout int The timeout in milliseconds to wait for the delegate to complete execution, or Infinite (-1) to wait indefinitely. Returns bool true if the delegate executed within the timeout period; otherwise, false. Type Parameters TCaller TParameters TReturn ~ThreadDelegateDispatcher() Disposes of the ThreadDelegateDispatcher. protected ~ThreadDelegateDispatcher() New(string?, int?) Constructs a new ThreadDelegateDispatcher by creating a new background worker thread with the specified name. public static ThreadDelegateDispatcher New(string? threadName = null, int? queueSize = null) Parameters threadName string The name of the thread to be created, or null to use the default thread name. queueSize int? The size of the delegate queue, or null to use the default value of ProcessorCount. Returns ThreadDelegateDispatcher A new instance of ThreadDelegateDispatcher. Remarks To end the execution of the dispatcher, simply remove all references to it and ensure no further delegates are enqueued. The newly created worker thread is marked as a background thread. You can also call the Dispose() method on the dispatcher to immediately end execution, although this is not encouraged as it could result in undefined behavior if the thread is still in the process of executing an enqueued delegate."
  },
  "api/Catalyst.Threading.html": {
    "href": "api/Catalyst.Threading.html",
    "title": "Namespace Catalyst.Threading | CatalystUI",
    "summary": "Namespace Catalyst.Threading Classes DelegateQueue A thread-safe StaticArrayQueue<T> which enqueues and dequeues delegates for execution. ThreadDelegateDispatcher Provides delegate execution synchronization for a given thread. Structs DelegateQueue.EnqueuedDelegate Represents a delegate which has been enqueued for execution."
  },
  "api/Catalyst.Windowing.DisplayOrientation.html": {
    "href": "api/Catalyst.Windowing.DisplayOrientation.html",
    "title": "Enum DisplayOrientation | CatalystUI",
    "summary": "Enum DisplayOrientation Namespace Catalyst.Windowing Assembly CatalystUI.Core.dll A list of possible orientations for a display. public enum DisplayOrientation Fields Landscape = 0 The display is oriented in landscape mode. Portrait = 90 The display is oriented in portrait mode. LandscapeFlipped = 180 The display is flipped and oriented in landscape mode. PortraitFlipped = 270 The display is flipped and oriented in portrait mode. Remarks The value of each orientation corresponds to the clockwise rotation angle of the display. For example, Portrait is 90 degrees, and LandscapeFlipped is 180 degrees. These values align with the Rotation property."
  },
  "api/Catalyst.Windowing.IDisplay.html": {
    "href": "api/Catalyst.Windowing.IDisplay.html",
    "title": "Interface IDisplay | CatalystUI",
    "summary": "Interface IDisplay Namespace Catalyst.Windowing Assembly CatalystUI.Core.dll The representation of an I/O device which provides an end-user some form of visual output in the form of pixels in a rectangular viewing area. public interface IDisplay Properties Descriptor Gets the device descriptor of the display. string? Descriptor { get; } Property Value string The display's device descriptor, or null one could not be determined. Height Gets the physical height of the display in pixels. uint Height { get; } Property Value uint The display's height in pixels. Manufacturer Gets the manufacturer of the display. string? Manufacturer { get; } Property Value string The display's manufacturer, or null if one could not be determined. Orientation Gets the orientation of the display. DisplayOrientation Orientation { get; } Property Value DisplayOrientation The display's orientation. PixelsPerInch Gets the number of pixels per inch of the display. double PixelsPerInch { get; } Property Value double The display's pixel density in pixels per inch. Remarks Also known as the dots per inch (DPI) of the display, the default value is 96 PPI (pixels per inch), which is equivalent to 3/4 of a point in typography, which is defined as 1/72 of an inch. The PPI will always be reported as the physical pixel density of the display, and scaling should be performed by using the ScalingFactor property instead. In the context of the CatalystUI framework, the PPI and DPI are considered equivalent values, with both referring to the same context of pixel density for a display. For more information on the differences between PPI and DPI, see the following resources: Wikipedia - Pixel Density Wikipedia - Dots Per Inch RefreshRate Gets the refresh rate of the display in hertz (Hz). double RefreshRate { get; } Property Value double The display's refresh rate. Rotation Gets the display's rotation in degrees. double Rotation { get; } Property Value double The display's rotation in degrees. Remarks A display's rotation is a more precise value of describing the display's orientation. If the rotation cannot be determined, then the display's rotation is reported as the Orientation underlying rotational value. Positive values rotate the display clockwise, whereas negative values rotate the display counter-clockwise. ScalingFactor Gets the scaling factor of the display. double ScalingFactor { get; } Property Value double The display's scaling factor as a decimal percentage. Examples A scaling factor of 1.25 indicates the display's physical size should be scaled by 125%. If the reported physical width of the display is 1920 pixels, then to calculate the logical width, you would perform 1920 / 1.25 to get the value of 1536. Remarks A scaling factor is used to determine the display's logical size in pixels, and is represented as a decimal percentage. The value of this percentage is set by the user and reported by the user's system. Larger values indicate a smaller logical display size, which results in multiple physical pixels being used to represent one logical pixel. As a consequence, the perceived size of the display is increased. Width Gets the physical width of the display in pixels. uint Width { get; } Property Value uint The display's width in pixels. X Gets the display's horizontal position relative to the primary display in pixels. double X { get; } Property Value double The display's horizontal position in pixels. Remarks The horizontal position will always be reported as the distance from the primary display's left edge. Negative values indicate the display is to the left of the primary display, while positive values indicate the display is to the right of the primary display. Y Gets the display's vertical position relative to the primary display in pixels. double Y { get; } Property Value double The display's vertical position in pixels. Remarks The vertical position will always be reported as the distance from the primary display's top edge. Negative values indicate the display is above the primary display, while positive values indicate the display is below the primary display. Methods GetDisplays<T>() Queries the system for a list of all available displays. public static abstract IEnumerable<T> GetDisplays<T>() where T : IDisplay Returns IEnumerable<T> An enumerable collection of displays. Type Parameters T The type of display to query for. GetPrimaryDisplay<T>() Queries the system for the primary display. public static abstract T? GetPrimaryDisplay<T>() where T : IDisplay Returns T The primary display, or null if one could not be determined. Type Parameters T The type of display to query for."
  },
  "api/Catalyst.Windowing.html": {
    "href": "api/Catalyst.Windowing.html",
    "title": "Namespace Catalyst.Windowing | CatalystUI",
    "summary": "Namespace Catalyst.Windowing Interfaces IDisplay The representation of an I/O device which provides an end-user some form of visual output in the form of pixels in a rectangular viewing area. Enums DisplayOrientation A list of possible orientations for a display."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | CatalystUI",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | CatalystUI",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "| CatalystUI",
    "summary": "Welcome to CatalystUI The documentation is currently a work-in-progress. We are actively working on it and will be updating it regularly. In the meantime, you can check out our GitHub repository for the latest updates and contributions. Thank you for your patience!"
  }
}